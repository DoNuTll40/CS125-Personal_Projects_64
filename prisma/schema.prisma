// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  TEACHER
}

enum mType {
  MATH
  SCIENCE
  THAI
  ART
  HISTORY
  GEOGRAPHY
  BIOLOGY
  CHEMISTRY
  PHYSICS
  ENGLISH
  PHYSICAL_EDUCATION
}

model Users {
  user_id        Int       @id @default(autoincrement())
  user_username  String
  user_password  String
  user_role      Role      @default(USER)
  user_firstname String?
  user_lastname  String?
  user_nickname  String?
  user_email     String?
  user_phone     String?
  user_address   String?
  user_brithday  DateTime?  @db.Date
  user_identity  Int?
  Section        Section[]
  class          Class?    @relation(fields: [class_id], references: [class_id])
  class_id       Int

  @@map("users")
}

model Teacher {
  teacher_id        Int           @id @default(autoincrement())
  teacher_firstname String
  teacher_lastname  String
  teacher_nickname  String?
  teacher_email     String?
  teacher_phone     String
  teacher_address   String
  teacher_brithday  DateTime      @db.Date
  sec_teacher       Sec_Teacher[]

  @@map("teacher")
}

model Subject {
  sub_id   Int     @id @default(autoincrement())
  sub_name String
  sub_day  String
  sub_time String?
  Major    Major[]
  room     Room    @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: Cascade)
  room_id  Int

  @@map("subject")
}

model Major {
  major_id   Int     @id @default(autoincrement())
  major_name String
  major_type mType
  subject    Subject @relation(fields: [subject_id], references: [sub_id], onDelete: Cascade, onUpdate: Cascade)
  subject_id Int

  @@map("major")
}

model Room {
  room_id        Int         @id @default(autoincrement())
  room_name      String
  room_number    Int
  build          Builds      @relation(fields: [build_id], references: [build_id], onDelete: Cascade, onUpdate: Cascade)
  build_id       Int
  Subject        Subject[]
  Sec_Teacher    Sec_Teacher @relation(fields: [sec_Teacher_id], references: [st_id], onDelete: Cascade, onUpdate: Cascade)
  sec_Teacher_id Int         @map("sec_teacher")

  @@map("room")
}

model Builds {
  build_id     Int    @id @default(autoincrement())
  build_name   String
  build_number String
  room         Room[]

  @@map("builds")
}

model Section {
  sec_id      Int           @id @default(autoincrement())
  sec_number  Int
  user        Users         @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  user_id     Int
  class       Class         @relation(fields: [class_id], references: [class_id], onDelete: Cascade, onUpdate: Cascade)
  class_id    Int
  sec_teacher Sec_Teacher[]

  @@map("section")
}

model Sec_Teacher {
  st_id      Int     @id @default(autoincrement())
  section    Section @relation(fields: [section_id], references: [sec_id], onDelete: Cascade, onUpdate: Cascade)
  section_id Int
  teacher    Teacher @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade, onUpdate: Cascade)
  teacher_id Int
  Room       Room[]

  @@map("sec_teacher")
}

model Class {
  class_id     Int       @id @default(autoincrement())
  class_number String
  Section      Section[]
  Users        Users[]

  @@map("class")
}
